# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s3Pj-ukfQJRSorQ5EOe6gc3V-n7_eBkl
"""

pip install keras

pip install seaborn

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import keras
from sklearn.model_selection import train_test_split

(X_train,y_train),(X_test,y_test)=keras.datasets.fashion_mnist.load_data()

X_train.shape,y_train.shape

X_test.shape,y_test.shape

X_train

X_train[0]

y_train[0]

class_labels=["T-shirt/top","Trouser","Pullover","Dress","Coat","Sandal","Shirt","Sneaker","Bag","Ankel boot"]
'''
0=>T-shirt/top
1=>Trouser
2=>Pullover
3=>Dress
4=>Coat
5=>Sandal
6=>Shirt
7=>Bag
8=>Ankle Boot '''

plt.imshow(X_train[0],cmap='Greys')

plt.imshow(X_train[1],cmap='pink')

!git clone https://github.com/sam-ssss?tab=repositories&q=&type=source&language=&sort=

y_test[1]

plt.figure(figsize=(16,16))
j=1
for i in np.random.randint(0,1000,25):
  plt.subplot(5,5,j);j+=1
  plt.imshow(X_train[i],cmap='Greys')
  plt.axis('off')
  plt.title('{}/{}'.format(class_labels[y_train[i]],y_train))

X_train.ndim

X_train.shape

X_train =np.expand_dims(X_train,-1)
X_test=np.expand_dims(X_test,-1)

X_train.ndim

X_train.shape

"""**FEATURE** **SCALING**"""

X_train=X_train/255
X_test=X_test/255

X_train[0]

"""SPLIT DATASET


"""

from sklearn.model_selection import train_test_split
X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size= 0.2, random_state=2020)

X_train.shape,y_train.shape

"""
#Building CNN model
"""

model = keras.models.Sequential([
                         keras.layers.Conv2D(filters=32, kernel_size=3, strides=(1,1), padding='valid',activation= 'relu', input_shape=[28,28,1]),
                         keras.layers.MaxPooling2D(pool_size=(2,2)),
                         keras.layers.Flatten(),
                         keras.layers.Dense(units=128, activation='relu'),
                         keras.layers.Dense(units=10, activation='softmax')
])

model.summary()

model.compile(optimizer='adam', loss= 'sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=10, batch_size=512, verbose=1, validation_data=(X_validation, y_validation))

"""Test & Evaluate Model-------
Confusion Matrix
Classification Report

"""

model.predict(np.expand_dims(X_test[0],axis=0)).round(2)

model.predict(np.expand_dims(X_test[0],axis=0)).round(2)

np.argmax(model.predict(np.expand_dims(X_test[0],axis=0)).round(2))

y_test[0]

y_pred=model.predict(X_test).round(2)
y_pred

model.evaluate(X_test,y_test)

"""# Visualize output

"""

plt.figure(figsize=(16,16))

j=1
for i in np.random.randint(0, 1000,25):
  plt.subplot(5,5, j); j+=1
  plt.imshow(X_test[i].reshape(28,28), cmap = 'Greys')
  plt.title('Actual = {} / {} \nPredicted = {} / {}'.format(class_labels[y_test[i]], y_test[i], class_labels[np.argmax(y_pred[i])],np.argmax(y_pred[i])))
  plt.axis('off')

"""confusion matrix

"""

from sklearn.metrics import confusion_matrix

plt.figure(figsize=(16,9))
y_pred_labels = [ np.argmax(label) for label in y_pred ]
cm = confusion_matrix(y_test, y_pred_labels)

# show cm
sns.heatmap(cm, annot=True, fmt='d',xticklabels=class_labels, yticklabels=class_labels)

from sklearn.metrics import classification_report
cr= classification_report(y_test, y_pred_labels, target_names=class_labels)
print(cr)

"""save model

"""

model.save('fashion_classification_cnn_model.h5')

path='/content/drive/MyDrive/fashion_classification_cnn_model_v2.h5'
model.save(path)



model_deploy=keras.models.load_model('fashion_classification_cnn_model.h5')

model_deploy.predict(X_test).round(2)

model_deploy.predict(np.expand_dims(X_test[0],axis=0)).round(2)

np.argmax(model_deploy.predict(np.expand_dims(X_test[0],axis=0)))

"""Building complex model"""

cnn_model2= keras.models.Sequential([
                         keras.layers.Conv2D(filters=32, kernel_size=3, strides=(1,1), padding='valid',activation= 'relu', input_shape=[28,28,1]),
                         keras.layers.MaxPooling2D(pool_size=(2,2)),
                         keras.layers.Conv2D(filters=64, kernel_size=3, strides=(2,2), padding='same', activation='relu'),
                         keras.layers.MaxPooling2D(pool_size=(2,2)),
                         keras.layers.Flatten(),
                         keras.layers.Dense(units=128, activation='relu'),
                         keras.layers.Dropout(0.25),
                         keras.layers.Dense(units=256, activation='relu'),
                         keras.layers.Dropout(0.25),
                         keras.layers.Dense(units=128, activation='relu'),
                         keras.layers.Dense(units=10, activation='softmax')
                         ])

#compile the Model
cnn_model2.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

#Train the model
cnn_model2.fit(X_train,y_train,epochs=20,batch_size=512,verbose=1,validation_data=(X_validation,y_validation))

cnn_model2.evaluate(X_test,y_test)

"""####very complex model"""

cnn_model3 = keras.models.Sequential([
                         keras.layers.Conv2D(filters=64, kernel_size=3, strides=(1,1), padding='valid',activation= 'relu', input_shape=[28,28,1]),
                         keras.layers.MaxPooling2D(pool_size=(2,2)),
                         keras.layers.Conv2D(filters=128, kernel_size=3, strides=(2,2), padding='same', activation='relu'),
                         keras.layers.MaxPooling2D(pool_size=(2,2)),
                         keras.layers.Conv2D(filters=64, kernel_size=3, strides=(2,2), padding='same', activation='relu'),
                         keras.layers.MaxPooling2D(pool_size=(2,2)),
                         keras.layers.Flatten(),
                         keras.layers.Dense(units=128, activation='relu'),
                         keras.layers.Dropout(0.25),
                         keras.layers.Dense(units=256, activation='relu'),
                         keras.layers.Dropout(0.5),
                         keras.layers.Dense(units=256, activation='relu'),
                         keras.layers.Dropout(0.25),
                         keras.layers.Dense(units=128, activation='relu'),
                         keras.layers.Dropout(0.10),
                         keras.layers.Dense(units=10, activation='softmax')
                         ])



"""#compile model"""

cnn_model3.compile(optimizer='adam', loss= 'sparse_categorical_crossentropy', metrics=['accuracy'])

"""#Train the Model

"""

cnn_model3.fit(X_train, y_train, epochs=50, batch_size=512, verbose=1, validation_data=(X_validation, y_validation))

cnn_model3.save('fashion_mnist_cnn_model3.h5')

cnn_model3.evaluate(X_test, y_test)